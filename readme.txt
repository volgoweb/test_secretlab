Техническое задание.
Необходимо реализовать игровую механику, которая состоит из следующих сущностей:

Участник с характеристиками: опыт и уровень, уровень определяется кол-вом опыта. 
События (действия), порождаемые участником и за которые он получает опыт.

1. события, которые всегда дают одинаково опыта. Подразделяются на: 
а. без ограничений на количество. 
б. ограничены количеством (то есть опыт дается только за N раз, например, участник может совершить действие 100 раз, но получит опыт только за первые 2 и не больше). 
в. ограничены количеством раз в определенный промежуток времени (например, 3 раза в день, то есть, совершив события 10 раз в рамках одного дня, участник получит опыт только за первые 3 раза).

2. события, которые дают разное количество опыта в зависимости от уровня пользователя, 
а. без ограничений 
б. с ограничением на кол-во событий в рамках уровня. например, не больше 10 раз за событие дается 20 опыта в рамках уровня 1, не больше 5 раз дается опыт 50 в рамках уровня 2, и т.д.

Следует реализовать модели и схематично/словами описать процесс получения/обработки данных событий.



Описание реализации.
Я написал не только классы моделей, но и классы обработчиков событий, которые выполняют все необходимые проверки и изменения опыта участников. Основные места снабдил комментариями, поэтому опишу лишь основу алгоритма.
В тех функциях проекта, в котором определяется факт совершения какого-то события, относящегося к участнику нужно вызывать функцию "register_event". Эта функция сохранит данные о событии в БД,  исходя из параметров события изменит опыт участника, который инициализировал это событие.

Функция "register_event" после сохранения данных о событии для данного типа события запрашивает у фабрики обработчиков ("EventHandlerFabric") объект обработчика для события. Обработчиков в данные момент определено 5 штук, согласно описанию классификации типов событий в ТЗ. Типов событий при этом может быть сколько угодно, просто в фабрики нужно прописать допустимые типы событий и параметры получения обработчика события.
Для большей гибкости при получении обработчика нужно указывать такой параметр, как "величина, на которую нужно увеличивать опыт участника", что дает возможность для разных типов событий по разному изменять количество опыта участника.
Уровень участника изменяется через штатный сигнал post_save модели участника. Условия смены уровня мне неизвестны, поэтому код не писал.
Для ускорения определения условий, при которых можно увеличивать опыт при разных типах событий, я добавил модель ("MemberEventsStatistics"), накапливающую некоторую статистику по совершенным событиям.